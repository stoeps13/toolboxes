FROM cgr.dev/chainguard/wolfi-base:latest
# Thanks to Nuno do Carmo for the initial prototype

LABEL com.github.containers.toolbox="true" \
      usage="This image is meant to be used with the Toolbox or Distrobox command" \
      summary="A blank Wolfi distrobox, suitable for development" \
      maintainer="jorge.castro@gmail.com"

ARG IMAGE_NAME="${IMAGE_NAME:-wolfi-toolbox}"

COPY ./toolboxes/wolfi-toolbox/packages.wolfi \
     ./toolboxes/wolfi-toolbox/packages.wolfi-dx \
     /tmp/

# Update image
RUN apk update && \
    apk upgrade

# Add optional packages
RUN grep -v '^#' /tmp/packages.wolfi | xargs apk add && \
    if [[ "${IMAGE_NAME}" =~ "dx" ]]; then \
        grep -v '^#' /tmp/packages.wolfi-dx | xargs apk add \
    ; fi && \
    echo "#!/bin/sh" >> /usr/bin/pinentry && \
    echo "exit 0" >> /usr/bin/pinentry && \
    chmod +x /usr/bin/pinentry

# DX: Include utilities available in the melange SDK
RUN if [[ "${IMAGE_NAME}" =~ "dx" ]]; then \
        cd /tmp && \
        export PATH="/tmp/go/bin:${PATH}" && \
        # go setup
        export GOPATH="/tmp/go" && \
        mkdir -p "${GOPATH}" && \
        # goimports
        go install golang.org/x/tools/cmd/goimports@latest && \
        mkdir -p "/usr/bin" && \
        mv "${GOPATH}/bin/goimports" "/usr/bin" && \
        # melange
        git clone https://github.com/chainguard-dev/melange.git && \
        (cd melange && make melange install) && \
        # apko
        git clone https://github.com/chainguard-dev/apko.git && \
        (cd apko && make apko install) && \
        # wolfictl
        git clone https://github.com/wolfi-dev/wolfictl.git && \
        (cd wolfictl && make wolfictl install) && \
        # yam
        git clone https://github.com/chainguard-dev/yam.git && \
        (cd yam && go build -v -o "/usr/bin/yam") && \
        cd / && \
        rm -rf /tmp/* \
    ; fi

# Install lazygit
RUN dnf copr enable atim/lazygit -y && dnf install -y lazygit

# Install language server for neovim
RUN npm install -g dockerfile-language-server-nodejs && npm install -g vscode-json-languageserver && npm i -g vscode-langservers-extracted && npm install -g yaml-language-server && npm install -g decktape && npm install --global yarn

# Install Talosctl
RUN cd /tmp && curl -s https://api.github.com/repos/siderolabs/talos/releases/latest | grep "browser_download_url" | grep "talosctl-linux-amd64" | cut -d : -f 2,3 | tr -d \" | wget -q -i - -O talosctl && chmod +x talosctl && mv talosctl /usr/local/bin/

# Install k9s
RUN cd /tmp && curl -s https://api.github.com/repos/derailed/k9s/releases/latest | grep "browser_download_url" | grep "k9s_Linux_amd64.tar.gz" | cut -d : -f 2,3 | tr -d \" | grep -v 'sbom.json' | wget -q -i - -O k9s_Linux_amd64.tar.gz && mkdir k9s-extracted && tar xzf k9s_Linux_amd64.tar.gz -C k9s-extracted && mv k9s-extracted/k9s /usr/local/bin && rm -rf /tmp/k9s-extracted k9s_Linux_amd64.tar.gz || echo "K9s not installed"

# Install atuin
RUN cd /tmp && curl -s https://api.github.com/repos/atuinsh/atuin/releases/latest | grep "browser_download_url" | grep "atuin-x86_64-unknown-linux-gnu.tar.gz" | cut -d : -f 2,3 | tr -d \" | grep -v 'sha256' | wget -q -i - -O atuin-x86_64-unknown-linux-gnu.tar.gz && mkdir atuin-extracted && tar xzf atuin-x86_64-unknown-linux-gnu.tar.gz -C atuin-extracted && mv atuin-extracted/atuin /usr/local/bin && rm -rf /tmp/atuin-extracted atuin-x86_64-unknown-linux-gnu.tar.gz || echo "Atuin not installed!"

# Install mkdocs
RUN pip install mkdocs mkdocs-material mkdocs-section-index ansible-core\<2.17 vimwiki-markdown maestral maestral\[gui\] tasklib pynvim

# Install Asciidoctor
RUN gem install asciidoctor-diagram asciidoctor-pdf asciidoctor-revealjs asciidoctor rouge

# Fix vdirsyncer
RUN sed -i 's!urn:ietf:wg:oauth:2.0:oob!http://127.0.0.1:8088!g' $(fd google.py /usr/lib | grep vdirsyncer)

# Add some container binaries
COPY --from=cgr.dev/chainguard/helm:latest /usr/bin/helm /usr/bin/helm
COPY --from=cgr.dev/chainguard/kubectl:latest /usr/bin/kubectl /usr/bin/kubectl
COPY --from=cgr.dev/chainguard/dive:latest /usr/bin/dive /usr/bin/dive
COPY --from=docker.io/aquasec/trivy:latest /usr/local/bin/trivy /usr/bin/trivy

# Install kns/kctx and add completions for Bash
RUN wget https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx -O /usr/bin/kubectx && \
    wget https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens -O /usr/bin/kubens && \
    chmod +x /usr/bin/kubectx /usr/bin/kubens

RUN cargo install stylua

# Install taskwarrior 3
RUN cd /usr/src && ls -al && whoami && curl -s https://api.github.com/repos/GothenburgBitFactory/taskwarrior/releases/latest | grep "browser_download_url" | cut -d : -f 2,3 | tr -d \" | tr -d \, | wget -q -i - -O taskwarrior-latest.tar.gz && tar xzf taskwarrior-latest.tar.gz && cd task-* && cmake -DCMAKE_BUILD_TYPE=release . && make && make install && cd /usr/src && rm -rf taskwarrior-latest.tar.gz task*

# Get Distrobox-host-exec and host-spawn
RUN git clone https://github.com/89luca89/distrobox.git --single-branch /tmp/distrobox && \
    cp /tmp/distrobox/distrobox-host-exec /usr/bin/distrobox-host-exec && \
    cp /tmp/distrobox/distrobox-export /usr/bin/distrobox-export && \
    cp /tmp/distrobox/distrobox-init /usr/bin/entrypoint && \
    wget https://github.com/1player/host-spawn/releases/download/$(cat /tmp/distrobox/distrobox-host-exec | grep host_spawn_version= | cut -d "\"" -f 2)/host-spawn-$(uname -m) -O /usr/bin/host-spawn && \
    chmod +x /usr/bin/host-spawn && \
    rm -drf /tmp/distrobox && \
    ln -fs /bin/sh /usr/bin/sh

# Make some symlinks
RUN mkdir -p /usr/local/bin  && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/docker && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/flatpak && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/podman && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/rpm-ostree

# Change root shell to BASH
RUN sed -i -e '/^root/s/\/bin\/ash/\/bin\/bash/' /etc/passwd

# Delete nonroot user
RUN userdel nonroot && rm -rf /home/nonroot
